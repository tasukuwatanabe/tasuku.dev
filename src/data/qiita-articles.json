[
  {
    "id": "a76f9100e6f9b3a1e3a1",
    "title": "Astroでimportエイリアスを設定する方法",
    "url": "https://qiita.com/tasukuwatanabe/items/a76f9100e6f9b3a1e3a1",
    "created_at": "2024-12-06T15:28:44+09:00",
    "updated_at": "2024-12-14T07:04:42+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "astro",
      "vite",
      "AdventCalendar2024"
    ],
    "likes_count": 24,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Fadvent-calendar-ogp-background-7940cd1c8db80a7ec40711d90f43539e.jpg%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D9703ce3a89c90b120589523a9d08092f?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9QXN0cm8lRTMlODElQTdpbXBvcnQlRTMlODIlQTglRTMlODIlQTQlRTMlODMlQUElRTMlODIlQTIlRTMlODIlQjklRTMlODIlOTIlRTglQTglQUQlRTUlQUUlOUElRTMlODElOTklRTMlODIlOEIlRTYlOTYlQjklRTYlQjMlOTUmdHh0LWFsaWduPWxlZnQlMkN0b3AmdHh0LWNvbG9yPSUyMzNBM0MzQyZ0eHQtZm9udD1IaXJhZ2lubyUyMFNhbnMlMjBXNiZ0eHQtc2l6ZT01NiZ0eHQtcGFkPTAmcz02YWRkZTMxOWVkZDc3NTBlOTRiN2U5YTYwOTBiMGE0Mw&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzM0EzQzNDJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTJhZDEyOGZkMTg2OTM2N2Q0NzYwOGI5OGRhMTI1OWFk&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%233A3C3C&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=909b8e5c027f9dfffb7ecaa144f88631",
    "body": "\nこの記事はHRBrain Advent Calendar 2024 14日目の記事です。\n\nhttps://qiita.com/advent-calendar/2024/hrbrain\n\n## はじめに\n\nこんにちは。HRBrainでオウンドメディアやランディングページの開発を担当している渡邉です。\n\nHRBrainでは、[サービスサイト](https://www.hrbrain.jp/)の開発にAstroを採用しています。\n\nAstroは、高速なウェブサイト構築を可能にするフレームワークであり、サーバーサイドレンダリング（SSR）や静的サイト生成（SSG）を行うことができます。\n\nこの記事では、Astroプロジェクトでimportエイリアスを設定する方法と、設定する中で遭遇した問題への対処法について解説します。\n\nhttps://docs.astro.build/ja/guides/imports/\n\n## tsconfig.jsonでのエイリアス設定\n\nTypeScriptでimportエイリアスを使用するには、`tsconfig.json`を編集します。\n\n以下の設定例では、`@/*`形式のエイリアスを使用して、`src`配下のディレクトリを対象にしています。\n\n```jsonc:tsconfig.json\n{\n  \"extends\": \"astro/tsconfigs/strict\",\n  \"compilerOptions\": {\n    \"baseUrl\": \".\", // 追加\n    \"paths\": {\n      \"@/*\": [\"src/*\"] // 追加\n    }\n  }\n}\n```\n\n`compilerOptions.baseUrl`が設定されていないと、エイリアスのパスが解決できないので注意して下さい。\n\nパスを`\"src/*\"`のように設定することで、`src`配下に新しいディレクトリが増える場合でも、新たにエイリアス設定を追加する必要がありません。\n\n```typescript:src/pages/index.astro\n// 相対パスを使用したimport\nimport Button from '../../components/Button.astro';\nimport companyLogo from '../../assets/images/logo.png';\nimport someFunction from '../../utils/someFunction.ts';\n\n// エイリアスを使用したimport\nimport Button from '@/components/Button.astro';\nimport companyLogo from '@/assets/images/logo.png';\nimport someFunction from '@/utils/someFunction.ts';\n```\n\n### エイリアスに関する注意点\n\n`@types`のように、スラッシュを挟まない形式でエイリアス設定をすると、TypeScriptがそれをnpmパッケージの`@types`と誤認識し、以下のようなエラーが発生する場合があります。\n\n```bash\nCannot find module '@types/...' or its corresponding type declarations.\n```\n\nこの問題を回避するために、エイリアス名を`@/`から始めるように設定しています。\n\n### CSSのurl()で発生するパス解決問題\n\n2024年12月時点では、前述した設定方法だと、CSSの`url()`で画像パスを指定する際にエイリアスが正しく解決されないというバグが潜んでいました。\n\n発生した環境は以下の通りです。\n\n- Astro：v4.5.5\n- Node：v20.17.0\n- Package Manager：Yarn\n\nhttps://github.com/withastro/astro/issues/9633\n\n例えば、以下のようにCSSでエイリアスを使用すると、ビルド時にパスが解決されずエラーになりました。\n\n```css\n.image {\n  background-image: url(\"@/images/example.png\"); /* 解決されない */\n}\n```\n\nこの問題に対しては、`astro.config.mjs`でViteのエイリアスを設定することで、CSS内の`url()`でもエイリアスが解決されるようになりました。\n\n```javascript:astro.config.mjs\nimport { fileURLToPath } from 'node:url' // 追加\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  vite: {\n    resolve: {\n      alias: {\n        '@/images': fileURLToPath(new URL('./src/assets/images', import.meta.url)) // 追加\n      },\n    },\n  },\n});\n```\n\n```css\n.image {\n  background-image: url(\"@/images/example.png\"); /* 解決される */\n}\n```\n\nこの問題はAstro本体に起因するものであり、今後のアップデートで公式による解消が期待されます。\n\n現時点ではこの方法を利用しつつ、公式の修正を待つことにしました。\n\n## まとめ\n\nAstroでimportエイリアスを設定する際のポイントと、CSSの`url()`におけるパス解決問題への対処方法を紹介しました。\n\n1. `tsconfig.json`の`compilerOptions`にimportエイリアスを設定。\n2. CSSの`url()`問題を回避するには、`astro.config.mjs`でViteのエイリアス設定を追加する。\n\nこれらを参考に、エイリアスを活用して効率的なプロジェクト運用を目指してください！\n\n## PR\n\nHRBrainではフロントエンドエンジニア（コミュニケーションデザイン）の採用も行なっているので、ぜひ！\n\nhttps://hrmos.co/pages/hrbrain/jobs/2110310\n\nhttps://www.hrbrain.co.jp/recruit\n"
  },
  {
    "id": "da8e71e3427c9febddc4",
    "title": "プログラムにおける終了コードとは？その役割とNode.jsでの活用例",
    "url": "https://qiita.com/tasukuwatanabe/items/da8e71e3427c9febddc4",
    "created_at": "2024-10-07T20:33:22+09:00",
    "updated_at": "2024-10-10T10:08:18+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "ShellScript",
      "Node.js",
      "shell"
    ],
    "likes_count": 14,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-afbab5eb44e0b055cce1258705637a91.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D8853539401b9169f5e9d39d2ce6ccad8?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9JUUzJTgzJTk3JUUzJTgzJUFEJUUzJTgyJUIwJUUzJTgzJUE5JUUzJTgzJUEwJUUzJTgxJUFCJUUzJTgxJThBJUUzJTgxJTkxJUUzJTgyJThCJUU3JUI1JTgyJUU0JUJBJTg2JUUzJTgyJUIzJUUzJTgzJUJDJUUzJTgzJTg5JUUzJTgxJUE4JUUzJTgxJUFGJUVGJUJDJTlGJUUzJTgxJTlEJUUzJTgxJUFFJUU1JUJEJUI5JUU1JTg5JUIyJUUzJTgxJUE4Tm9kZS5qcyVFMyU4MSVBNyVFMyU4MSVBRSVFNiVCNCVCQiVFNyU5NCVBOCVFNCVCRSU4QiZ0eHQtYWxpZ249bGVmdCUyQ3RvcCZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTU2JnR4dC1wYWQ9MCZzPTlmMzY3YzUwYjdjMzNhY2Q2ZDIwNDdhZWIzZTI4Njg0&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTBmYzNlYzQ5NWEyOWEwOWNjZGI3YTE0YmZmMWY3Y2Ux&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%231E2121&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=3696ccc754e049dd2e97a37e9d3f5a40",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディア・ランディングページの開発を担当している渡邉です。\n\n先日、終了コードを真偽値と誤認したことが原因で、ハマりかけました。\n\n終了コードは、プログラムが終了する際にOSへ返す数値であり、その値によってプログラムの実行結果を表しています。\n\nこの記事では、終了コードの役割と、Node.jsでの具体的な活用例を解説します。\n\n## 終了コードを真偽値と混同してはいけない\n\nプログラムの終了コードは `0` が成功、`0以外` がエラーや失敗を表します。\n\nこれは多くのプログラミング言語やOSで採用されている標準的な仕様です。\n\nしかし、直感的には `0` はfalseや失敗を示し、`1` はtrueや成功を意味すると思いがちです。これが誤認の原因となります。\n\n- 終了コード\n  - `0` → 成功\n  - `1` やそれ以外 → 失敗\n- 真偽値（一般的な解釈）\n  - `0` → false\n  - `1` → true\n\n## 終了コードの特徴と一般的な値\n\n終了コードには、以下のような特徴があります。\n\n1. 終了コード `0` はプログラムの正常終了を、`0` 以外の値はエラーや異常終了を表す\n1. 異常終了を表す終了コードは、エラーの種類に応じて使い分けられる\n1. 終了コードによって後続の処理を分岐させるなどの使い方がある\n\n広く使われている、終了コードの一般的な値は以下のとおりです。\n\n|終了コード|意味|\n|--|--|\n|0|正常終了|\n|1|一般的なエラー|\n|2|シェル組み込み関数の誤用|\n|126|コマンドの実行権限がない場合|\n|127|コマンドが見つからない場合|\n|128|exitへの無効な引数|\n|130|Ctrl+Cによる中断で返される|\n|255|終了コードが範囲外の値|\n\nhttps://tldp.org/LDP/abs/html/exitcodes.html\n\n## Node.jsでの終了コードの扱い方\n\nNode.jsでは、`process.exit()` メソッドを使って明示的に終了コードを指定できます。\n\n```javascript\n// 正常終了\nprocess.exit(0);\n\n// 一般的なエラー\nprocess.exit(1);\n```\n\n## Node.jsでの活用例\n\n### ファイル操作\n\nファイル操作の成功・失敗に応じて終了コードを返す例です。\n\n```javascript:file_operation.js\nconst fs = require('fs');\n\nfs.readFile('somefile.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error(\"ファイルの読み込みに失敗しました:\", err);\n    process.exit(1);\n  } else {\n    console.log(\"ファイルの内容:\", data);\n    process.exit(0);\n  }\n});\n```\n\n### HTTPリクエスト\n\nHTTPリクエストの成否に応じて終了コードを返す例です。\n\n```javascript:http_request.js\nconst https = require('https');\n\nhttps.get('https://www.hrbrain.jp', (res) => {\n  if (res.statusCode === 200) {\n    console.log(\"HTTPリクエスト成功\");\n    process.exit(0);\n  } else {\n    console.error(\"HTTPリクエスト失敗:\", res.statusCode);\n    process.exit(1);\n  }\n}).on('error', (err) => {\n  console.error(\"HTTPリクエストエラー:\", err);\n  process.exit(1);\n});\n```\n\n### シェルスクリプトとの連携\n\nNode.jsのプログラムをシェルスクリプトから実行し、終了コードによって後続処理を分岐させる例です。\n\n```bash:exit_code.sh\n#!/bin/bash\n\nnode http_request.js\n\nif [ $? -eq 0 ]; then\n  echo \"プログラムは正常に終了しました\"\nelse\n  echo \"プログラムはエラーで終了しました\"\nfi\n```\n\n上記の例では、シェルスクリプト内で `http_request.js` を実行しています。\n\nURL設定を書き換えてHTTPリクエストの成否を操作することで、出力結果を変化させることができます。\n\n```bash\n# 設定したURLがレスポンスコード200を返す場合\n$ sh exit_code.sh\nHTTPリクエスト成功\nプログラムは正常に終了しました\n\n# 無効なURLを指定した場合や、レスポンスコード200以外が返る場合\n$ sh exit_code.sh\nHTTPリクエストエラー\nプログラムはエラーで終了しました\n```\n\n## まとめ\n\n終了コードは、`0`~`255`までの数値で表され、その番号に応じてエラーの内容を表現しています。\n\n頻繁に遭遇する、真偽値としての `1` や `0` とは意味合いが異なるので、混同しないように注意しましょう！\n\n## PR\n\nHRBrainでは積極的に採用を行なっているのでぜひ！\n\nhttps://www.hrbrain.co.jp/recruit\n"
  },
  {
    "id": "eeba48b411b3f57dd303",
    "title": "【CSS】position: sticky で固定ヘッダーを実装する",
    "url": "https://qiita.com/tasukuwatanabe/items/eeba48b411b3f57dd303",
    "created_at": "2024-09-25T11:50:27+09:00",
    "updated_at": "2024-09-27T09:10:27+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "HTML",
      "CSS"
    ],
    "likes_count": 13,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-afbab5eb44e0b055cce1258705637a91.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D8853539401b9169f5e9d39d2ce6ccad8?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9JUUzJTgwJTkwQ1NTJUUzJTgwJTkxcG9zaXRpb24lM0ElMjBzdGlja3klMjAlRTMlODElQTclRTUlOUIlQkElRTUlQUUlOUElRTMlODMlOTglRTMlODMlODMlRTMlODMlODAlRTMlODMlQkMlRTMlODIlOTIlRTUlQUUlOUYlRTglQTMlODUlRTMlODElOTklRTMlODIlOEImdHh0LWFsaWduPWxlZnQlMkN0b3AmdHh0LWNvbG9yPSUyMzFFMjEyMSZ0eHQtZm9udD1IaXJhZ2lubyUyMFNhbnMlMjBXNiZ0eHQtc2l6ZT01NiZ0eHQtcGFkPTAmcz03ZDRmMTBiNDI5ODRmMTE0NjJiOGE2N2ZhMWM4MGM2Ng&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTBmYzNlYzQ5NWEyOWEwOWNjZGI3YTE0YmZmMWY3Y2Ux&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%231E2121&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=d3024a6e7eed4b4461ed1ba889672d53",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディア・ランディングページの開発を担当している渡邉です。\n\nWebサイト制作でよく使う固定ヘッダー。\n\nこの記事では、 `position: sticky` で固定ヘッダーを実装するメリットについての解説と、実装例を紹介します。\n\nhttps://developer.mozilla.org/ja/docs/Web/CSS/position\n\n## position: fixed の問題点\n\n`position: fixed` は、要素をビューポート（ブラウザの表示領域）に対して固定表示する際に便利なプロパティです。\n\nしかし、 `position: fixed` を使用すると、固定された要素が他の要素の上に重なって表示されてしまうため、コンテンツが隠れる問題が発生します。\n\nこれは、`position: fixed` を適用することで**ヘッダーが通常フローから外れる**ためです。\n\n例えば、以下のようなHTML構造とCSSスタイルシートを考えてみましょう。\n\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"dark\" data-default-tab=\"css,result\" data-slug-hash=\"MWNWqMx\" data-pen-title=\"Header position fixed\" data-editable=\"true\" data-user=\"tasukuwatanabe\" style=\"height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/tasukuwatanabe/pen/MWNWqMx\">\n  Header position fixed</a> by Tasuku Watanabe (<a href=\"https://codepen.io/tasukuwatanabe\">@tasukuwatanabe</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n上記の例では、ヘッダーを画面上部に固定表示するために `position: fixed` を使用しています。\n\nしかし、ヘッダーが通常フローから外れ、コンテンツがヘッダーの下に隠れてしまうため、 `margin-top` でコンテンツを下にずらす調整が必要になります。\n\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"dark\" data-default-tab=\"css,result\" data-slug-hash=\"mdNdzmp\" data-pen-title=\"Header position fixed - margin\" data-editable=\"true\" data-user=\"tasukuwatanabe\" style=\"height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/tasukuwatanabe/pen/mdNdzmp\">\n  Header position fixed - margin</a> by Tasuku Watanabe (<a href=\"https://codepen.io/tasukuwatanabe\">@tasukuwatanabe</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\nこの `margin-top` の値は、ヘッダーの高さに合わせて調整する必要があり、ヘッダーの高さが変更された場合は、 `margin-top` の値も変更する必要があり、メンテナンスが煩雑になる可能性があります。\n\n例えば、以下のように、ページ最上部に他の要素を追加する場合にも、`margin-top` を再調整するきっかけになります。\n\n![header_position_fixed_trouble.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/0767d803-1a55-8319-2698-9e53a5cb40ab.png)\n\n## position: sticky で実現する固定ヘッダー\n\n一方、`position: sticky` を使用することで、 `position: fixed` のように要素が他の要素の上に重なって表示されることを防ぎ（通常フローから外れない）、自然なスクロール動作を実現できます。\n\n初期状態では通常の要素と同じように配置されますが、スクロールが指定した閾値に達すると、その位置で固定表示されるようになります。\n\n先ほどのHTML構造を `position: sticky` を使用して書き換えてみましょう。\n\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"dark\" data-default-tab=\"css,result\" data-slug-hash=\"abebRbz\" data-pen-title=\"Header position sticky\" data-user=\"tasukuwatanabe\" style=\"height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/tasukuwatanabe/pen/abebRbz\">\n  Header position sticky</a> by Tasuku Watanabe (<a href=\"https://codepen.io/tasukuwatanabe\">@tasukuwatanabe</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n上記の例では、ヘッダーに `position: sticky` と `top: 0` を指定することで、ヘッダーが画面上部に固定表示されるようになります。\n\n`position: fixed` のようにコンテンツを下にずらすための `margin-top` の設定が不要になり、変更漏れによるレイアウトの崩れを防ぐことができます。\n\n## まとめ\n\n本記事では、 `position: sticky` を使用した固定ヘッダーの実装方法を紹介しました。\n\n`position: sticky` は通常フローから外れないため、後続の要素に対するmargin設定も不要です。\n\n固定ヘッダーの実装に最適なので、ぜひ使ってみてください。\n\n## PR\n\nHRBrainではフロントエンドエンジニア（コミュニケーションデザイン）の採用も行なっているので、ぜひ！\n\nhttps://hrmos.co/pages/hrbrain/jobs/2110310\n\nhttps://www.hrbrain.co.jp/recruit\n\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n"
  },
  {
    "id": "5569398ed253db3a4f27",
    "title": "Keeper Commander CLI を使って環境変数をチームで安全に共有しよう！",
    "url": "https://qiita.com/tasukuwatanabe/items/5569398ed253db3a4f27",
    "created_at": "2024-09-11T15:03:57+09:00",
    "updated_at": "2024-11-20T15:20:35+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "Security",
      "Keeper"
    ],
    "likes_count": 21,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-afbab5eb44e0b055cce1258705637a91.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D8853539401b9169f5e9d39d2ce6ccad8?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9S2VlcGVyJTIwQ29tbWFuZGVyJTIwQ0xJJTIwJUUzJTgyJTkyJUU0JUJEJUJGJUUzJTgxJUEzJUUzJTgxJUE2JUU3JTkyJUIwJUU1JUEyJTgzJUU1JUE0JTg5JUU2JTk1JUIwJUUzJTgyJTkyJUUzJTgzJTgxJUUzJTgzJUJDJUUzJTgzJUEwJUUzJTgxJUE3JUU1JUFFJTg5JUU1JTg1JUE4JUUzJTgxJUFCJUU1JTg1JUIxJUU2JTlDJTg5JUUzJTgxJTk3JUUzJTgyJTg4JUUzJTgxJTg2JUVGJUJDJTgxJnR4dC1hbGlnbj1sZWZ0JTJDdG9wJnR4dC1jb2xvcj0lMjMxRTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9NTYmdHh0LXBhZD0wJnM9MzViNTQxYWMzODIxNGRiM2ZkMTdmZmJmOWJlMjNhNDA&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTBmYzNlYzQ5NWEyOWEwOWNjZGI3YTE0YmZmMWY3Y2Ux&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%231E2121&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=188b2003303f4886ffead140d8c4d84c",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディア・ランディングページの開発を担当している渡邉です。\n\nチーム開発において、APIキーやデータベース接続情報など、機密性の高いデータを安全に共有することは重要な課題です。\n\nHRBrainでは、パスワード管理ツールを「1Password」から「**Keeper**」に切り替えました。\n\nそれに伴い、私たちのチームも「1Password CLI」から「**Keeper Commander CLI**」へ移行し、開発に関わる環境変数の共有に活用しています。\n\nこの記事では、Keeper Commander CLIを使ってチーム開発で環境変数を安全に管理・共有する方法をご紹介します。\n\nhttps://docs.keeper.io/jp\n\n## 環境変数をKeeperに保存する方法\n\n### カスタムフィールドを使用\n\n環境変数をKeeperに保存する方法として、2つのアプローチを考えました。\n\n1. **.envファイルをそのままKeeperにアップロードする方法**\n   - ファイル自体をKeeperに保存することは可能ですが、ファイル内の情報は**検索対象外**となります。\n\n2. **カスタムフィールドを利用する方法**\n   - 環境変数をカスタムフィールドとして保存することで、Keeperの検索機能を活用して必要な情報を迅速に取得可能です。\n\nそのため、検索の利便性を重視し、**2. カスタムフィールドに環境変数を保存する方法**を採用しました。\n\n![keeper_custom_field.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/7149aa77-3a16-5d4a-44fa-cd3ac2551d5a.png)\n\n## Keeper Commander CLIとjqのインストール\n\n### Keeper Commander CLIのインストール\n\nKeeper Commander CLIは、Pythonパッケージとして簡単にインストール可能です。\n\n詳細なインストール手順は以下の公式ドキュメントで紹介されています。\n\nhttps://docs.keeper.io/jp/v/secrets-manager-jp/commander-cli/commander-installation-setup\n\n<br>\n\n私の環境はmacOSなので、ここではmacOSでのインストール手順を紹介します。\n\n以下、インストールのためのコマンドです。\n\nまずはpip3コマンドがインストールされていることを確認します。\n\n```bash\n$ pip3 --version\n\npip 24.2 from /opt/homebrew/lib/python3.12/site-packages/pip (python 3.12)\n```\n\n次に、pip3を使ってKeeper Commanderをインストールします。\n\nここで、私の環境ではエラーが出てしまい、インストールができませんでした。\n\n```bash\n$ pip3 install keepercommander\n\nerror: externally-managed-environment\n\n× This environment is externally managed\n╰─> To install Python packages system-wide, try brew install\n    xyz, where xyz is the package you are trying to\n    install.\n\n    If you wish to install a Python library that isn't in Homebrew,\n    use a virtual environment:\n\n    python3 -m venv path/to/venv\n    source path/to/venv/bin/activate\n    python3 -m pip install xyz\n\n    If you wish to install a Python application that isn't in Homebrew,\n    it may be easiest to use 'pipx install xyz', which will manage a\n    virtual environment for you. You can install pipx with\n\n    brew install pipx\n```\n\nそのため、指示にある通り、brewでpipxをインストールし、次にpipxコマンドを使ってKeeper Commanderをインストールしました。\n\n2024年11月現在、Python v3.13以上だとエラーになるため、v3.12をオプションで指定しています。\n\n```bash\n$ brew install pipx\n$ pipx install keepercommander --python python3.12\n\n  installed package keepercommander 16.11.13, installed using Python 3.12.6\n  These apps are now globally available\n    - keeper\ndone! ✨ 🌟 ✨\n```\n\nKeeper Commanderがインストールできたことを確認します。\n\n```bash\n$ keeper version -v\n\n   Commander Version: 16.11.13 (Current version)\n  API Client Version: c16.11.0\n      Python Version: 3.12.6 (main, Sep  6 2024, 19:03:47) [Clang 15.0.0 (clang-1500.1.0.2.5)]\n    Operating System: macOS(22.6.0)\n   Working directory: /Users/yourname/Dev/qiita\n   Package directory: /Users/yourname/.local/pipx/venvs/keepercommander/lib/python3.12/site-packages/keepercommander\n        Config. File: /Users/yourname/.keeper/config.json\n          Executable: /Users/yourname/.local/pipx/venvs/keepercommander/bin/python\n```\n\n`keeper shell` コマンドで、Keeper Commanderを対話モードで起動します。\n\n```bash\n$ keeper shell\n\n(省略)\n\nNavigate to SSO Login URL with your browser and complete login.\nCopy a returned SSO Token into clipboard.\nPaste that token into Commander\nNOTE: To copy SSO Token please click \"Copy login token\" button on \"SSO Connect\" page.\n\n  a. SSO User with a Master Password\n  c. Copy SSO Login URL to clipboard\n  o. Navigate to SSO Login URL with the default web browser\n  p. Paste SSO Token from clipboard\n  q. Quit SSO login attempt and return to Commander prompt\nSelection:\n```\n\nログイン方法の選択が求められるので、自分の環境に応じた方法を選択してください。\n\n私は法人SSOログインを使用しているため `o` を選択し、`SSO Token`をコピーした上で、`p`でトークンを入力しています。\n\n![sso_connect.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/b5b35f8e-bc95-d370-e30b-848d47c94611.png)\n\n```\nSelection: p\nSuccessfully authenticated with SSO Login\nSyncing...\nDecrypted [81] record(s)\nMy Vault>\n```\n\n保管庫にログインが成功したら、`ls` を叩いてみてください。あなたが保存しておいた認証アイテムが表示されれば成功です！\n\n```\nMy Vault> ls\n（ここにあなたが保存した認証アイテムが表示されれば成功です）\n```\n\n### jqのインストール\n\n環境変数を整形して出力するために、JSON形式のデータを処理できる **jq** が必要です。\n\njqがインストールされていない場合、以下のページを参考にインストールを行なってください。\n\nhttps://jqlang.github.io/jq/download/\n\n<br>\n\nちなみにmacOSでHomebrewをお使いの方であれば、以下のコマンドなどでインストールできます。\n\n```bash\nbrew install jq\n```\n\n## 環境変数を取得する方法\n\nKeeperに保存した環境変数を取得するために、以下のコマンドを実行します。\n\n```bash\nkeeper get [UID] --format json | jq -r '.custom[] | .label + \"=\" + .value[]' > .env\n```\n\n|コマンド|意味|\n|--|--|\n|**keeper get [UID]**|Keeperに保存された指定のレコードを取得します。UIDは各レコードに割り当てられた一意の識別子です。|\n|**--format json**|出力をJSON形式で整形します。|\n|**jq -r '.custom[] \\| .label + \"=\" + .value[]'**|JSONデータを`label=value` 形式で整形します。|\n|**> .env**|jqコマンドにより出力した値を `.env` ファイルに書き込みます。|\n\nUIDはKeeperアイテムの `i` マークから確認ができます。\n\n![keeper_uid.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/b88bacbd-8e2e-5ecb-475d-2e03ff0a85b0.png)\n\n### 実行例\n\nUIDが `abcde12345` のアイテムであれば、以下のようなコマンドになります。\n\n```bash\nkeeper get abcde12345 --format json | jq -r '.custom[] | .label + \"=\" + .value[]' > .env\n```\n\n環境変数がカスタムフィールドに保存されている場合、JSONは以下の形式で取得されます。\n\n```json\n{\n  \"custom\": [\n    {\n      \"label\": \"DB_USERNAME\",\n      \"value\": [\"dbusername\"]\n    },\n    {\n      \"label\": \"DB_HOST\",\n      \"value\": [\"dbhost\"]\n    }\n    {\n      \"label\": \"DB_PASSWORD\",\n      \"value\": [\"dbpassword\"]\n    }\n  ]\n}\n```\n\nこれに対して、jqコマンドで整形した上で、`.env` に書き込みを行うと、以下のような形式で出力されます。\n\n```.env\nDB_USERNAME=dbusername\nDB_HOST=dbhost\nDB_PASSWORD=dbpassword\n```\n\n### Keeper Commanderへのログインを何度も求められる場合\n\nKeeper Commander CLIで毎回ログイン情報が求められてしまう方は、KeeperのWebサイトで「**ログイン状態を保持**」をオンに設定すると、この問題が解消できます。\n\n![keeper_security_option.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/be507703-57bf-f312-3556-1d16e9fc2b00.png)\n\n## まとめ\n\nKeeperを活用することで、チーム開発における**機密情報の安全な共有**が実現します。\n\nとくに、CLIツールとjqコマンドを組み合わせることで、**環境変数を効率的かつ安全に管理**できるため、セキュリティリスクを大幅に低減可能です。\n\n今回紹介した方法を活用して、より安全で効率的なチーム開発環境を整えてみてください。\n\n## PR\n\nHRBrainでは積極的にエンジニア採用を行なっているので、ぜひ！\n\nhttps://www.hrbrain.co.jp/recruit\n"
  },
  {
    "id": "44f6ad50efeae40267cd",
    "title": "Astroで window is not defined エラーを解消する方法",
    "url": "https://qiita.com/tasukuwatanabe/items/44f6ad50efeae40267cd",
    "created_at": "2024-09-05T15:06:16+09:00",
    "updated_at": "2024-09-24T18:35:40+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "Vue.js",
      "React",
      "astro"
    ],
    "likes_count": 7,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-afbab5eb44e0b055cce1258705637a91.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D8853539401b9169f5e9d39d2ce6ccad8?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9QXN0cm8lRTMlODElQTclMjB3aW5kb3clMjBpcyUyMG5vdCUyMGRlZmluZWQlMjAlRTMlODIlQTglRTMlODMlQTklRTMlODMlQkMlRTMlODIlOTIlRTglQTclQTMlRTYlQjYlODglRTMlODElOTklRTMlODIlOEIlRTYlOTYlQjklRTYlQjMlOTUmdHh0LWFsaWduPWxlZnQlMkN0b3AmdHh0LWNvbG9yPSUyMzFFMjEyMSZ0eHQtZm9udD1IaXJhZ2lubyUyMFNhbnMlMjBXNiZ0eHQtc2l6ZT01NiZ0eHQtcGFkPTAmcz0zYTg1ZTdiNjk0MTNkYmNmMGNlOTg1NmE4NDNiMmEzOA&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTBmYzNlYzQ5NWEyOWEwOWNjZGI3YTE0YmZmMWY3Y2Ux&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%231E2121&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=9be4a190aea4afeffdff5ea570acfd9e",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディアやランディングページの開発を担当している渡邉です。\n\nHRBrainでは、[サービスサイト](https://www.hrbrain.jp/)の開発にAstroを採用しています。\n\nAstroは、高速なウェブサイト構築を可能にするフレームワークであり、サーバーサイドレンダリング（SSR）や静的サイト生成（SSG）を行うことができます。\n\nこの記事では、Astro開発で遭遇した `window is not defined` というエラーの解決策を分かりやすく解説します。\n\nhttps://astro.build/\n\n## Astroはサーバーサイドで実行される\n\nAstroは、まずサーバーサイドでHTMLを生成し、それをブラウザに送信します。\n\nその後、ブラウザ上でJavaScriptが実行され、イベントリスナーの登録やコンポーネントの状態管理などを行います。\n\nこれを「ハイドレーション」と呼びます。\n\n\n## window is not defined エラーの原因\n\nブラウザには `window` というオブジェクトが用意されており、ブラウザのウィンドウに関する情報を持っています。\n\nしかし、Astroはサーバーサイドレンダリングを行うため、コードの一部はサーバー側で実行されます。\n\nサーバーにはブラウザのウィンドウは存在しないため、windowオブジェクトも存在しません。\n\nそのため、サーバー側で実行されるコードの中でwindowオブジェクトを使おうとすると、`window is not defined` エラーが発生します。\n\n## window is not defined エラーの解消\n\n以下のAstroドキュメントにも記載されている方法ではありますが、コードを用いてより詳しく解説します。\n\nhttps://docs.astro.build/ja/guides/troubleshooting/#%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E5%8E%9F%E5%9B%A0\n\n### client:only ディレクティブを使う\n\nAstroは、React、Vue、Svelteなど、様々なフレームワークとの連携（インテグレーション）をサポートしています。 \n\n`client:only` ディレクティブを使用することで、これらのフレームワークをクライアントサイドでのみ実行することができます。 \n\n例えば、以下のようにコンポーネントを `client:only` ディレクティブを使ってレンダリングすることができます。\n\n```html:src/pages/index.astro\n<Component client:only=\"react\" />   <!-- React -->\n<Component client:only=\"vue\" />     <!-- Vue -->\n<Component client:only=\"svelte\" />  <!-- Svelte -->\n```\n<br>\n\nhttps://docs.astro.build/ja/reference/directives-reference/#clientonly\n\n#### client:only ディレクティブの効果\n\n`client:only` ディレクティブを指定したコンポーネントは、そのコンポーネント自身だけでなく、そのコンポーネント内で使用されている子コンポーネントも、すべてクライアントサイドでのみ実行されるようになります。\n\n例えば、以下のような構成の場合、`ParentComponent` と `ChildComponent` はどちらもクライアントサイドでのみ実行されます。\n\n```html:src/pages/index.astro\n<ParentComponent client:only=\"react\" />\n```\n\n```jsx:src/components/ParentComponent.jsx\nimport React from \"react\";\nimport ChildComponent from \"./ChildComponent\";\n\nfunction ParentComponent() {\n  return (\n    <div>\n      <h1>Parent Component</h1>\n      <ChildComponent />\n    </div>\n  );\n}\n\nexport default ParentComponent;\n```\n\n```jsx:src/components/ParentComponent.jsx\nimport React from \"react\";\n\nfunction ChildComponent() {\n  return <p>Child Component</p>;\n}\n\nexport default ChildComponent;\n```\n\n### VueのonMountedやReactのuseEffectを使う\n\nクライアントサイドでのみ実行されるライフサイクルイベントを利用する方法もあります。\n\nVue.jsでは `onMounted` 、Reactでは `useEffect` というライフサイクルイベントが用意されています。\n\n- `onMounted` は、コンポーネントがブラウザにマウントされた後に実行されます。\n- `useEffect` は、コンポーネントがブラウザにマウントされた後、そして必要に応じて更新後にも実行されます。\n\nこれらのイベントを使うことで、サーバー側でのエラーを防ぎつつ、クライアントサイドでwindowオブジェクトを安全に利用することができます。\n\n#### Vueでの例 (onMountedフック)\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// ref()を使ってリアクティブな変数 currentPath を作成\nconst currentPath = ref(null)\n\nonMounted(() => {\n  // ref()で作成した変数の値を更新するには .value を使用\n  currentPath.value = window.location.pathname;\n})\n</script>\n\n<template>\n  <div>現在のパス: {{ currentPath }}</div>\n</template>\n```\n\n#### Reactでの例 (useEffectフック)\n\n```jsx\nimport React, { useState, useEffect } from \"react\";\n\nfunction CurrentPathComponent() {\n  const [currentPath, setCurrentPath] = useState(null);\n\n  useEffect(() => {\n    setCurrentPath(window.location.pathname);\n  }, []);\n\n  return <div>現在のパス: {currentPath}</div>;\n}\n\nexport default CurrentPathComponent;\n```\n\n## まとめ\n\nAstroで `window is not defined` というエラーが発生する原因は、サーバーサイドで windowオブジェクトが存在しないためです。\n\n以下のいずれかの方法で解消することができます。\n\n- `client:only` ディレクティブを使って、コンポーネントをクライアントサイドでのみ実行する\n- Vue.jsの `onMounted` やReact `useEffect` を使って、コンポーネントがクライアントサイドでマウントされた後にwindowオブジェクトにアクセスする\n\n## PR\n\nHRBrainではフロントエンドエンジニア（コミュニケーションデザイン）の採用も行なっているので、ぜひ！\n\nhttps://hrmos.co/pages/hrbrain/jobs/2110310\n\nhttps://www.hrbrain.co.jp/recruit\n"
  },
  {
    "id": "4774c9a8ef73363f52b9",
    "title": "postMessageを使ってクロスオリジンなiframeからデータを受け取る",
    "url": "https://qiita.com/tasukuwatanabe/items/4774c9a8ef73363f52b9",
    "created_at": "2024-08-30T18:21:27+09:00",
    "updated_at": "2024-09-24T18:35:40+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "JavaScript",
      "iframe",
      "GoogleTagManager"
    ],
    "likes_count": 8,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-afbab5eb44e0b055cce1258705637a91.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D8853539401b9169f5e9d39d2ce6ccad8?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9cG9zdE1lc3NhZ2UlRTMlODIlOTIlRTQlQkQlQkYlRTMlODElQTMlRTMlODElQTYlRTMlODIlQUYlRTMlODMlQUQlRTMlODIlQjklRTMlODIlQUElRTMlODMlQUElRTMlODIlQjglRTMlODMlQjMlRTMlODElQUFpZnJhbWUlRTMlODElOEIlRTMlODIlODklRTMlODMlODclRTMlODMlQkMlRTMlODIlQkYlRTMlODIlOTIlRTUlOEYlOTclRTMlODElOTElRTUlOEYlOTYlRTMlODIlOEImdHh0LWFsaWduPWxlZnQlMkN0b3AmdHh0LWNvbG9yPSUyMzFFMjEyMSZ0eHQtZm9udD1IaXJhZ2lubyUyMFNhbnMlMjBXNiZ0eHQtc2l6ZT01NiZ0eHQtcGFkPTAmcz01YWI5NGZkOTE3MTg4Nzk4MDMxZGVkMmQzZWEzMTc4YQ&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTBmYzNlYzQ5NWEyOWEwOWNjZGI3YTE0YmZmMWY3Y2Ux&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%231E2121&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=785905e302a799f73d806e7c32bbff09",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディアやランディングページの開発を担当している渡邉です。\n\nSalesforceなどのMAツール製のiframeフォームをウェブサイトに埋め込むことがあります。\n\nこの記事では、ウェブサイトとiframeが異なるドメインの場合に、iframeからウェブサイトにデータを受け渡す方法について解説しています。\n\n▼ [HRBrainサービスサイト](https://www.hrbrain.jp/)におけるiframeフォームの事例\n\n![iframe_form.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/acd843cf-63ce-53b2-d9f2-daddb30efa19.png)\n\n## クロスオリジンでのiframe操作の制限\n\niframeとウェブサイトが異なるドメインに存在している場合、ウェブサイトからiframe内の要素に直接アクセスすることができません。\n\n- ウェブサイトのURL： `example.com` \n- iframeのURL： `example.net`\n\nこれは、「同一オリジンポリシー」により、セキュリティの観点から、オリジンが異なるページへのアクセスは制限を受けるためです。（クロスオリジン）\n\nhttps://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy\n\nたとえば、iframe内のボタンをウェブサイトから操作しようとすると、以下のようなエラーが発生します。\n\n```javascript:ウェブサイト側：example.com\nconst iframe = document.getElementById('myIframe');\n\n// iframe内のbutton要素にはウェブサイトからアクセスが許可されない\niframe.contentWindow.document.getElementById('myButton'); // error\n\n// Error: \n// Failed to read a named property 'document' from 'Window': \n// Blocked a frame with origin \"http://example.com\" from accessing a cross-origin frame.\n```\n\nこのエラーは、iframeがクロスオリジンのため、ウェブサイトからiframe内のDOMにアクセスできないことを示しています。\n\n## postMessageメソッドについて\n\nクロスオリジンでデータを送信するには、postMessageメソッドを使用します。\n\nこのメソッドは、異なるドメイン間で安全にデータをやり取りするための手段です。\n\nhttps://developer.mozilla.org/ja/docs/Web/API/Window/postMessage\n\n### postMessageメソッドの使い方\n\npostMessageメソッドの第1引数にはウェブサイト側に渡すデータを、第2引数にはターゲットオリジン（メッセージを受け取るドメイン）を渡します。\n\n```javascript:iframe側：example.net\nwindow.parent.postMessage('Hello from iframe!', 'example.com');\n```\n```javascript:ウェブサイト側：example.com\nwindow.addEventListener('message', (event) => {\n  console.log(event.data); // 'Hello from iframe!' が出力される\n});\n```\n\n### ターゲットオリジンの指定\npostMessageメソッドでは、メッセージを送信するターゲットオリジンを第2引数に指定できます。\n\n- `*`：すべてのドメインを許可しますが、セキュリティリスクがあるため、特定のオリジンを指定することを推奨します。\n\n- `https://example.com`：特定のドメインを指定することで、信頼できるドメインだけがメッセージを受信できようになります。\n\n### iframeから受け取ったデータをGTMに渡す事例\n\nウェブサイトでは、`message` イベントリスナーを使用して、iframeから送信されたデータを受け取ります。\n\nさらに、iframeから受け取ったデータをdataLayerを使ってGTMに渡すことで、マーケティング施策の幅が広がります。\n\n```javascript:iframe側：example.net\nconst form = document.getElementById('myForm');\n\nform.addEventListener('submit', (event) => {\n  // フォームから入力された値を取得してオブジェクトにまとめる\n  const formData = {\n    name: document.getElementById('name').value, // ユーザー名\n    email: document.getElementById('email').value, // メールアドレス\n  };\n\n  // ウェブサイトにデータを送信\n  window.parent.postMessage({ formData }, 'https://example.com');\n});\n```\n```javascript:ウェブサイト側：example.com\nwindow.addEventListener('message', (event) => {\n  // 送信元のオリジンを確認\n  if (event.origin !== 'https://example.net') return; // 信頼できるオリジンのみ処理する\n\n  const formData = event.data.formData;\n\n  // 必要に応じて、GTMにデータを送信\n  dataLayer.push({\n    event: 'formSubmit',\n    formData: formData,\n  });\n});\n```\n\n## まとめ\n\nこの記事では、postMessageメソッドを使って、クロスオリジンのiframeからウェブサイトにデータを送信する方法を解説しました。\n\npostMessageメソッドを活用すれば、異なるドメイン間でも安全にデータをやり取りすることが可能です。\n\n## PR\n\nHRBrainではフロントエンドエンジニア（コミュニケーションデザイン）の採用も行なっているので、ぜひ！\n\nhttps://hrmos.co/pages/hrbrain/jobs/2110310\n\nhttps://www.hrbrain.co.jp/recruit\n"
  },
  {
    "id": "3f7324c0b33fe5584f89",
    "title": "ファイルのリネームがgitで差分認識されない？git mvを使おう",
    "url": "https://qiita.com/tasukuwatanabe/items/3f7324c0b33fe5584f89",
    "created_at": "2024-08-23T18:35:34+09:00",
    "updated_at": "2024-08-25T14:27:46+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "Git"
    ],
    "likes_count": 20,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-afbab5eb44e0b055cce1258705637a91.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D8853539401b9169f5e9d39d2ce6ccad8?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9JUUzJTgzJTk1JUUzJTgyJUExJUUzJTgyJUE0JUUzJTgzJUFCJUUzJTgxJUFFJUUzJTgzJUFBJUUzJTgzJThEJUUzJTgzJUJDJUUzJTgzJUEwJUUzJTgxJThDZ2l0JUUzJTgxJUE3JUU1JUI3JUFFJUU1JTg4JTg2JUU4JUFBJThEJUU4JUFEJTk4JUUzJTgxJTk1JUUzJTgyJThDJUUzJTgxJUFBJUUzJTgxJTg0JUVGJUJDJTlGZ2l0JTIwbXYlRTMlODIlOTIlRTQlQkQlQkYlRTMlODElOEElRTMlODElODYmdHh0LWFsaWduPWxlZnQlMkN0b3AmdHh0LWNvbG9yPSUyMzFFMjEyMSZ0eHQtZm9udD1IaXJhZ2lubyUyMFNhbnMlMjBXNiZ0eHQtc2l6ZT01NiZ0eHQtcGFkPTAmcz05ZThmMjhmODMyMmM5ODkzYjBkZjUwNzY3NmE3M2NlYg&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTBmYzNlYzQ5NWEyOWEwOWNjZGI3YTE0YmZmMWY3Y2Ux&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%231E2121&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=732029773ad90a0c3b9c2cfe22d1f992",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディア・ランディングページの開発を担当している渡邉です。\n\n先日、ファイル名を変更した際に、変更が差分としてGitに認識されないということがありました。\n\nこの記事では、Gitが差分を見逃す原因と、その対処法について解説しています。\n\n## ファイル名の大文字と小文字を変更するケース\n\nGitプロジェクトの中で、`filerename.txt` を `fileRename.txt` にリネームしてみました。\n\nしかし、ローカル環境ではファイル名が変更されていたにもかかわらず、Gitのステージングエリアにはその変更が反映されていません。\n\n```bash\n$ mv filerename.txt fileRename.txt\n$ ls\nfileRename.txt\n$ git status\nOn branch main\nnothing to commit, working tree clean\n```\n\n### なぜGitがリネームを見逃すのか？\n\nそれぞれのOSには何かしらのファイルシステムが使用されていますが、ファイルシステムの種類によっては、Gitがリネームを認識しない場合があります。\n\nたとえば、MacOSで使用されているAPFS（※）やHFS+というファイルシステムがありますが、これは**ケースインセンシティブ**であり、大文字・小文字を区別しません。\n\n※ 設定によりケースセンシティブへの変更が可能ですが、ここでは割愛します。\n\n参考：[Macのディスクユーティリティで利用できるファイルシステムフォーマット - Apple サポート (日本)](https://support.apple.com/ja-jp/guide/disk-utility/dsku19ed921c/mac)\n\n## 解決方法1： `git mv` を利用する\n\nこの問題を避けるには、ファイルをリネームする際に `git mv` コマンドを使うことです。\n\n```bash\ngit mv filerename.txt fileRename.txt\n```\n\nこのコマンドを使うことで、Gitはファイルのリネームを正しく認識し、差分として記録します。\n\n```bash\n$ git mv filerename.txt fileRename.txt\n$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\trenamed:    filerename.txt -> fileRename.txt\n```\n\n参考：[Git - git-mv Documentation](https://git-scm.com/docs/git-mv)\n\n## 解決方法2: git configの設定変更\n\n```bash\ngit config core.ignorecase false\n```\n\nこのコマンドは、Gitがファイル名の大文字・小文字を区別するように設定を変更します。\n\n```bash\n$ mv filerename.txt fileRename.txt\n$ git status\nOn branch main\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tfileRename.txt\n```\n\nこの設定により、リネームが検知されるようになります。\n\nただし、リポジトリ内に`text.txt`と`Text.txt`などのようなファイルが共存する場合には、競合が発生する可能性があります。\n\nまた、プロジェクトのメンバー同士で設定を統一するなど、チーム全体での統一が必要になります。\n\n参考：[Git - git-config Documentation](https://git-scm.com/docs/git-config#Documentation/git-config.txt-coreignoreCase)\n\n## まとめ\n\nファイル名を変更するだけの単純な操作でも、ファイルシステムの違いによって差分として検出されないことがあります。\n\nファイル名の大文字・小文字を変更する場合は、`git mv` コマンドを使用することで、確実にリネームをGitに認識させることができます。\n\n## PR\n\nHRBrainでは一緒に働く仲間を募集しています。歴史に残るトライをしよう！\n\nhttps://www.hrbrain.co.jp/recruit\n"
  },
  {
    "id": "99ba6476d550edfead08",
    "title": "SVGの色が変わらない？CSSで色を操作する方法",
    "url": "https://qiita.com/tasukuwatanabe/items/99ba6476d550edfead08",
    "created_at": "2024-08-15T23:43:09+09:00",
    "updated_at": "2024-09-24T18:35:40+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "HTML",
      "CSS",
      "SVG"
    ],
    "likes_count": 15,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-afbab5eb44e0b055cce1258705637a91.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D8853539401b9169f5e9d39d2ce6ccad8?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9U1ZHJUUzJTgxJUFFJUU4JTg5JUIyJUUzJTgxJThDJUU1JUE0JTg5JUUzJTgyJThGJUUzJTgyJTg5JUUzJTgxJUFBJUUzJTgxJTg0JUVGJUJDJTlGQ1NTJUUzJTgxJUE3JUU4JTg5JUIyJUUzJTgyJTkyJUU2JTkzJThEJUU0JUJEJTlDJUUzJTgxJTk5JUUzJTgyJThCJUU2JTk2JUI5JUU2JUIzJTk1JnR4dC1hbGlnbj1sZWZ0JTJDdG9wJnR4dC1jb2xvcj0lMjMxRTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9NTYmdHh0LXBhZD0wJnM9MDE2YmE1NzI0ZDA4N2UzZmUzYjM4Yzg3NDc5YWU5MTc&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTBmYzNlYzQ5NWEyOWEwOWNjZGI3YTE0YmZmMWY3Y2Ux&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%231E2121&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=2c1d246f440aa8dcc7e9860e01a34c5b",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディア・ランディングページの開発を担当している渡邉です。\n\n先日、SVGの色をCSSで変更しようとした際に、なかなか色が変わらなくて困ってしまいました。\n\nこの記事では、SVGの色がCSSで変更できない場合の原因と、2つの解決策をわかりやすく解説します。\n\n## SVGの色を変更できない原因\n\nfill属性に直接色が指定されていると、その色が固定されてしまい、CSSのcolorプロパティによる変更が適用されなくなります。\n\n```html\n<div class=\"parent\">\n  <svg>\n    <rect width=\"100\" height=\"100\" fill=\"#000\" />\n  </svg>\n</div>\n\n<style>\n  .parent {\n    color: red; // 効きません\n  }\n</style>\n```\n\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"dark\" data-default-tab=\"html,result\" data-slug-hash=\"vYqpXOo\" data-pen-title=\"svg_fill_bad\" data-editable=\"true\" data-user=\"tasukuwatanabe\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/tasukuwatanabe/pen/vYqpXOo\">\n  svg_fill_bad</a> by Tasuku Watanabe (<a href=\"https://codepen.io/tasukuwatanabe\">@tasukuwatanabe</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n## 解決策1：fill属性にcurrentColorを指定する\n\nこの問題を解決するには、fill属性に`currentColor`という値を指定します。\n\n`currentColor`は、SVGのfill属性やstroke属性に指定できる特別な値で、**親要素のcolorプロパティに設定された色を継承します。**\n\nhttps://developer.mozilla.org/ja/docs/Web/SVG/Attribute/color\n\n<br>\n\n例えば、以下のように親要素に`color: red;`を指定した場合、SVGのrect要素は赤色になります。\n\n```html\n<div class=\"parent\">\n  <svg>\n    <rect width=\"100\" height=\"100\" fill=\"currentColor\" />\n  </svg>\n</div>\n\n<style>\n  .parent {\n    color: red;\n  }\n</style>\n```\n\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"dark\" data-default-tab=\"html,result\" data-slug-hash=\"WNqdGGp\" data-pen-title=\"Untitled\" data-editable=\"true\" data-user=\"tasukuwatanabe\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/tasukuwatanabe/pen/WNqdGGp\">\n  Untitled</a> by Tasuku Watanabe (<a href=\"https://codepen.io/tasukuwatanabe\">@tasukuwatanabe</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n### currentColorを指定して色操作する利点\n\nCSSのcolorプロパティでSVGの色を操作する利点として、併用するテキストなどと一緒に色操作が行える点です。\n\nSVGのアイコンは以下のようにテキストと一緒に使うケースが少なくありません。\n\nそのような場合に、親要素でcolorプロパティを設定することで、子要素の色を連動して操作することができます。\n\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"dark\" data-default-tab=\"html,result\" data-slug-hash=\"yLdpzyR\" data-pen-title=\"svg_in_button\" data-editable=\"true\" data-user=\"tasukuwatanabe\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/tasukuwatanabe/pen/yLdpzyR\">\n  svg_in_button</a> by Tasuku Watanabe (<a href=\"https://codepen.io/tasukuwatanabe\">@tasukuwatanabe</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n## 解決策2：CSSのfillプロパティで色を指定する\n\nCSSのfillプロパティで色を指定する方法もあります。\n\n```html\n<svg>\n  <rect width=\"100\" height=\"100\" />\n</svg>\n\n<style>\n  svg rect {\n    fill: red;\n  }\n</style>\n```\n\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"dark\" data-default-tab=\"html,result\" data-slug-hash=\"rNEpGoV\" data-pen-title=\"Untitled\" data-editable=\"true\" data-user=\"tasukuwatanabe\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/tasukuwatanabe/pen/rNEpGoV\">\n  Untitled</a> by Tasuku Watanabe (<a href=\"https://codepen.io/tasukuwatanabe\">@tasukuwatanabe</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n<br>\n\n以前は頻繁にfillプロパティを使ってSVGの色指定をしていたのですが、`fill=\"currentColor\"`の存在を知ってからは、あまり使わなくなりました。\n\nこの指定方法は、SVG内の個々の要素に異なる色を設定したい場合などに適しています。\n\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"dark\" data-default-tab=\"html,result\" data-slug-hash=\"OJezjeg\" data-pen-title=\"Untitled\" data-editable=\"true\" data-user=\"tasukuwatanabe\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/tasukuwatanabe/pen/OJezjeg\">\n  Untitled</a> by Tasuku Watanabe (<a href=\"https://codepen.io/tasukuwatanabe\">@tasukuwatanabe</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n## まとめ\n\nSVGの色をCSSで操作する場合、以下のような方法が挙げられます。\n\n- `fill=\"currentColor\"`を指定してcolorプロパティで操作する方法\n- CSSのfillプロパティで色を操作する方法\n\n特に、currentColorは親要素のcolorプロパティの色を継承するため、テキストと連動して色を変更することができ、非常に便利です。\n\nSVGは色々な属性があるため複雑に感じるかもしれませんが、実際に使ってみて、その便利さを実感してみてください。\n\n## PR\n\nHRBrainではフロントエンドエンジニア（コミュニケーションデザイン）の採用も行なっているので、ぜひ！\n\nhttps://hrmos.co/pages/hrbrain/jobs/2110310\n\nhttps://www.hrbrain.co.jp/recruit\n\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n"
  },
  {
    "id": "5c248645e245669e59a8",
    "title": "NetlifyでPDFや画像をnoindexに設定する方法",
    "url": "https://qiita.com/tasukuwatanabe/items/5c248645e245669e59a8",
    "created_at": "2024-08-09T18:01:48+09:00",
    "updated_at": "2024-09-24T18:35:40+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "Netlify"
    ],
    "likes_count": 7,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-afbab5eb44e0b055cce1258705637a91.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3D8853539401b9169f5e9d39d2ce6ccad8?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9TmV0bGlmeSVFMyU4MSVBN1BERiVFMyU4MiU4NCVFNyU5NCVCQiVFNSU4MyU4RiVFMyU4MiU5Mm5vaW5kZXglRTMlODElQUIlRTglQTglQUQlRTUlQUUlOUElRTMlODElOTklRTMlODIlOEIlRTYlOTYlQjklRTYlQjMlOTUmdHh0LWFsaWduPWxlZnQlMkN0b3AmdHh0LWNvbG9yPSUyMzFFMjEyMSZ0eHQtZm9udD1IaXJhZ2lubyUyMFNhbnMlMjBXNiZ0eHQtc2l6ZT01NiZ0eHQtcGFkPTAmcz1kMGEwMmJjYmU5MDQ0NDdmYzA2MjgyZGEzODk0YTZhOA&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzMUUyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPTBmYzNlYzQ5NWEyOWEwOWNjZGI3YTE0YmZmMWY3Y2Ux&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%231E2121&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=7b75795cae664cb5ac269f04d3814e49",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディア・ランディングページの開発を担当している渡邉です。\n\n先日、Netlifyでホスティングしている特定のPDFファイルを検索エンジンのインデックスから除外したい、という依頼を受けました。\n\n通常、HTMLファイルであれば、以下のようにmetaタグを設置することで簡単にnoindexに設定できます。\n\n```html\n<meta name=\"robots\" content=\"noindex\">\n```\n\nしかし、PDFファイルにはmetaタグを設置することができません。\n\nそこでこの記事では、Netlifyで特定のページやリソース（PDF、動画、画像など）をmetaタグを使わずにnoindexに設定する方法を紹介します。\n\n## レスポンスヘッダーのX-Robots-Tagでnoindexを設定する\n\n結論から言うと、X-Robots-Tagというカスタムヘッダーを指定することで、この問題を解決できます。\n\n```\nX-Robots-Tag: noindex\n```\n\nX-Robots-Tagは、HTTPレスポンスヘッダーに設定することで、検索エンジンに対するインデックス指示を行うためのものです。\n\nこれを使うことで、metaタグによるnoindex設定と同様に、ページやリソースを検索エンジンのインデックスから除外することができます。\n\n実は、この方法はGoogleの公式ドキュメントでも紹介されています。\n\nhttps://developers.google.com/search/docs/crawling-indexing/block-indexing?hl=ja\n\n<br>\n\nちなみに、Netlifyのdeploy-preview環境が検索エンジンにインデックスされないのは、deploy-preview環境に対して`x-robots-tag: noindex`がデフォルトで設定されているためです。\n\n![netlify_deploy_preview_noindex.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/b1e15b1a-e777-4bbb-2a20-215c3a0f9fd5.png)\n\n## netlify.tomlでの設定方法\nNetlifyで特定のディレクトリやファイルにX-Robots-Tagを設定するには、netlify.tomlファイルを使用します。\n\n### 手順1: netlify.tomlファイルの作成\nプロジェクトのルートディレクトリにnetlify.tomlという名前のファイルを作成します。\n\n### 手順2: HTTPレスポンスヘッダーの設定\nnetlify.tomlにカスタムヘッダーを設定するためのセクションを追加します。\n\n以下のように記述することで、特定のディレクトリやファイルに`X-Robots-Tag: noindex`を指定できます。\n\n```toml:netlify.toml\n[[headers]]\n  path = \"/hoge/*\"\n  [headers.values]\n    X-Robots-Tag = \"noindex\"\n\n[[headers]]\n  path = \"/fuga/sensitive-file.pdf\"\n  [headers.values]\n    X-Robots-Tag = \"noindex\"\n```\n\n上記の設定では、`/hoge/`ディレクトリ内のすべてのファイルと、`/fuga/sensitive-file.pdf`という特定のファイルにnoindexが適用されます。\n\n### 手順3: デプロイ\n設定が完了したら、netlify.tomlを保存してNetlifyにデプロイします。\n\n指定したリソースにアクセスすると、ヘッダー情報に`X-Robots-Tag: noindex`が適用されていることが分かります。\n\nこれにより、検索エンジンのインデックスから除外されます。\n\n![netlify_pdf_noindex.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/151f1ebd-72fd-9d22-fd28-c36abbd2b818.png)\n\nもし、すでにページやファイルがGoogleにインデックスされている場合は、Google Search ConsoleからURLの削除を行なってください。\n\nhttps://support.google.com/webmasters/answer/9689846?hl=ja\n\n## まとめ\n\nX-Robots-Tagというカスタムヘッダーを設定することで、Netlifyにホスティングした特定のページやリソースをnoindexに設定することが可能です。\n\n検索エンジンに対して特定のコンテンツをインデックスしないように指示でき、SEO対策やコンテンツ管理で役に立ちます。\n\n実装する際の参考にしてください。\n\n## PR\n\nHRBrainではフロントエンドエンジニア（コミュニケーションデザイン）の採用も行なっているのでぜひ！\n\nhttps://hrmos.co/pages/hrbrain/jobs/2110310\n\nhttps://www.hrbrain.co.jp/recruit\n"
  },
  {
    "id": "bb4c97da0891da3e3da9",
    "title": "URLコピーボタンと吹き出しをNext.jsで実装する",
    "url": "https://qiita.com/tasukuwatanabe/items/bb4c97da0891da3e3da9",
    "created_at": "2024-07-04T10:43:39+09:00",
    "updated_at": "2024-09-24T18:35:40+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "Next.js",
      "QiitaEngineerFesta",
      "QiitaEngineerFesta2024"
    ],
    "likes_count": 18,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Fengineer-festa-ogp-background-074608b13b4bbe67c10ada41e7e2d292.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3Dd3ac973618fd8790b17d67d98a8e49b6?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9VVJMJUUzJTgyJUIzJUUzJTgzJTk0JUUzJTgzJUJDJUUzJTgzJTlDJUUzJTgyJUJGJUUzJTgzJUIzJUUzJTgxJUE4JUU1JTkwJUI5JUUzJTgxJThEJUU1JTg3JUJBJUUzJTgxJTk3JUUzJTgyJTkyTmV4dC5qcyVFMyU4MSVBNyVFNSVBRSU5RiVFOCVBMyU4NSVFMyU4MSU5OSVFMyU4MiU4QiZ0eHQtYWxpZ249bGVmdCUyQ3RvcCZ0eHQtY29sb3I9JTIzRkZGRkZGJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTU2JnR4dC1wYWQ9MCZzPWQ0MTY0YzYzMzZjMTRiZmFkMTBlOTQ4N2M3N2FmOTlk&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzRkZGRkZGJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPWEwYmY5ZWViOTczNWU3ODAwNTZlNTg3N2FlNTNmYjZj&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%23FFFFFF&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=8ace59525fb5e9fded33ad958ded6f00",
    "body": "\n## はじめに\n\nこんにちは。HRBrainでオウンドメディア・ランディングページの開発を担当している渡邉です。\n\nこの記事では、Next.jsプロジェクトにURLコピーボタンを実装し、さらにユーザー体験を向上させるために吹き出し（ツールチップ）を追加する方法を紹介します。\n\n![copy_url.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/837d779f-7064-78a5-3af1-98b5689d5c06.gif)\n\n:::note info\n吹き出し（ツールチップ）について\nボタンをクリックした際に表示される吹き出しを「ツールチップ」と呼んでいます。\n一般的には、ボタンなどの要素にホバーやクリックした時に出現する脚注や説明を指すそうです。\n:::\n\n## 実装手順\n\n### コンポーネントの作成\n\n`CopyUrlButton`コンポーネントを作成します。\n\n```react\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\n\nconst CopyUrlButton = () => {\n  // ツールチップの表示・非表示を制御するstate\n  const [displayTooltip, setDisplayTooltip] = useState(false);\n  const router = useRouter();\n\n  const currentUrl = `${process.env.NEXT_PUBLIC_BASE_URL}${router.pathname}`\n\n  const handleCopy = async () => {\n    try {\n      // 現在のURLをクリップボードにコピー\n      await navigator.clipboard.writeText(currentUrl);\n\n      setDisplayTooltip(true);\n      setTimeout(() => {\n        setDisplayTooltip(false);\n      }, 2000); // 2秒後にメッセージを消す\n    } catch (err) {\n      console.error('URLのコピーに失敗しました');\n    }\n  };\n\n  return (\n    <div class=\"wrap\">\n      <div className='tooltip' style={{ opacity: displayTooltip ? 1 : 0 }}>URLをコピーしました</div>\n      <button onClick={handleCopy} class=\"button\">URLをコピーする</button>\n    </div>\n  )\n};\n\nexport default CopyUrlButton;\n```\n\n### ツールチップのスタイル実装\n\nツールチップのスタイルを実装します。\n\n```scss\n.wrap {\n  position: relative;\n\n  .tooltip {\n    color: #fff;\n    font-size: 12px;\n    padding: 8px 8px 9px;\n    background-color: #000;\n    border-radius: 6px;\n    white-space: nowrap; // テキストを改行しない\n    transition-duration: 0.2s; // ふわっと表示\n\n    // 以下は親要素に対する配置\n    position: absolute;\n    top: -45px;\n    left: 50%;\n    transform: translateX(-50%);\n\n    // ツールチップ下部の三角形部分\n    &::after {\n      content: '';\n      width: 12px;\n      height: 8px;\n      background-color: #000;\n      clip-path: polygon(0 0, 100% 0%, 50% 100%);\n\n      // ツールチップに対する配置\n      position: absolute;\n      bottom: -7px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n  }\n\n  .button {\n    // ボタンのCSSはお好みで\n  }\n}\n```\n\n### clip-pathを使った三角形の作成\n\nツールチップ下部の三角形部分には、`clip-path`を使用しています。\n\n`clip-path`は、要素の形状を定義するためのCSSプロパティです。`polygon()`関数を用いることで、任意の多角形を定義できます。\n\n`polygon(0% 0%, 100% 0%, 50% 100%)`は、左上、右上、中央下の3点を結んだ三角形を表します。\n\n```css\n.triangle {\n  width: 100px;\n  height: 70px;\n  background-color: #000;\n  clip-path: polygon(0% 0%, 100% 0%, 50% 100%);\n}\n```\n\n![clip_path_triangle.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/1d8276b3-0742-fd98-def3-f074cf58d8db.png)\n\n\n▼MDN\n\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/polygon\n\n▼caniuse\n\nIE以外のブラウザでサポートされています。\n\nhttps://caniuse.com/css-clip-path\n\n## まとめ\n\nNext.jsプロジェクトにURLコピーボタンを実装することができました。\n\nユーザーが簡単に現在のページのURLをコピーできるようにすることで、ソーシャルメディアへの共有やブックマークを促進することができます。\n\n実装する際の参考にしてください。\n\n## PR\n\nHRBrainではフロントエンドエンジニア（コミュニケーションデザイン）の採用も行なっています。\n\nhttps://hrmos.co/pages/hrbrain/jobs/2110310\n\nhttps://www.hrbrain.co.jp/recruit\n"
  },
  {
    "id": "6bea0188e6e574cb2e2b",
    "title": "Next.js + Contentfulでブログの目次を実装する",
    "url": "https://qiita.com/tasukuwatanabe/items/6bea0188e6e574cb2e2b",
    "created_at": "2024-06-19T11:42:07+09:00",
    "updated_at": "2024-09-24T18:35:40+09:00",
    "user_id": "tasukuwatanabe",
    "user_icon": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/681000/30199067e525f778678b311428ab5e4418d97aee/x_large.png?1727662334",
    "tags": [
      "Next.js",
      "contentful",
      "QiitaEngineerFesta",
      "QiitaEngineerFesta2024"
    ],
    "likes_count": 19,
    "ogImage": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Fengineer-festa-ogp-background-074608b13b4bbe67c10ada41e7e2d292.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLXByb2ZpbGUtaW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1pbWFnZS1zdG9yZSUyRjAlMkY2ODEwMDAlMkYzMDE5OTA2N2U1MjVmNzc4Njc4YjMxMTQyOGFiNWU0NDE4ZDk3YWVlJTJGeF9sYXJnZS5wbmclM0YxNzI3NjYyMzM0P2l4bGliPXJiLTQuMC4wJmFyPTElM0ExJmZpdD1jcm9wJm1hc2s9ZWxsaXBzZSZmbT1wbmczMiZzPWU0MjdhODFkYmI3Y2EwYjNkODAwMDJmNjEyNmUyMjFj%26blend-x%3D120%26blend-y%3D462%26blend-w%3D90%26blend-h%3D90%26blend-mode%3Dnormal%26mark64%3DaHR0cHM6Ly9xaWl0YS1vcmdhbml6YXRpb24taW1hZ2VzLmltZ2l4Lm5ldC9odHRwcyUzQSUyRiUyRnMzLWFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20lMkZxaWl0YS1vcmdhbml6YXRpb24taW1hZ2UlMkYzODI3OGJhN2ZjOTFkMWY4YjFjYmExY2ZjNjczMDVlZWE2N2ZiMTk4JTJGb3JpZ2luYWwuanBnJTNGMTczMjA5ODMzNj9peGxpYj1yYi00LjAuMCZ3PTQ0Jmg9NDQmZml0PWNyb3AmbWFzaz1jb3JuZXJzJmNvcm5lci1yYWRpdXM9OCZib3JkZXI9MiUyQ0ZGRkZGRiZmbT1wbmczMiZzPWZjZDRlZDMyMmU2ZGRhN2Q4OTRlYmIzNTM5YTNlZDBh%26mark-x%3D186%26mark-y%3D515%26mark-w%3D40%26mark-h%3D40%26s%3Dd3ac973618fd8790b17d67d98a8e49b6?ixlib=rb-4.0.0&w=1200&fm=jpg&mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTk2MCZoPTMyNCZ0eHQ9TmV4dC5qcyUyMCUyQiUyMENvbnRlbnRmdWwlRTMlODElQTclRTMlODMlOTYlRTMlODMlQUQlRTMlODIlQjAlRTMlODElQUUlRTclOUIlQUUlRTYlQUMlQTElRTMlODIlOTIlRTUlQUUlOUYlRTglQTMlODUlRTMlODElOTklRTMlODIlOEImdHh0LWFsaWduPWxlZnQlMkN0b3AmdHh0LWNvbG9yPSUyM0ZGRkZGRiZ0eHQtZm9udD1IaXJhZ2lubyUyMFNhbnMlMjBXNiZ0eHQtc2l6ZT01NiZ0eHQtcGFkPTAmcz0zN2FiYjYzYmQyOTZmMWJiNzQxNzA3ZWQ4ZjY3NzllZA&mark-x=120&mark-y=112&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTgzOCZoPTU4JnR4dD0lNDB0YXN1a3V3YXRhbmFiZSZ0eHQtY29sb3I9JTIzRkZGRkZGJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1wYWQ9MCZzPWEwYmY5ZWViOTczNWU3ODAwNTZlNTg3N2FlNTNmYjZj&blend-x=242&blend-y=454&blend-w=838&blend-h=46&blend-fit=crop&blend-crop=left%2Cbottom&blend-mode=normal&txt64=5qCq5byP5Lya56S-SFJCcmFpbg&txt-x=242&txt-y=539&txt-width=838&txt-clip=end%2Cellipsis&txt-color=%23FFFFFF&txt-font=Hiragino%20Sans%20W6&txt-size=28&s=077a87516e4e6d5374f26d30315e3ae7",
    "body": "## 概要\n\nこんにちは。HRBrainでオウンドメディア・ランディングページの開発を担当している渡邉です。\n\nHRBrainでは、Next.js（TypeScript）とContentfulというHeadless CMSを使ってオウンドメディアを運営しています。\n\n本記事では、Contentfulに入力したRich TextデータをNext.js側からAPI経由で取得し、目次を作成する方法をご紹介します。\n\n![hruniv_toc.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/e3d14cfd-fb14-c041-89e3-d1db37c5336b.png)\n\n\n## 手順\n\n- ContentfulのAPIを使用してRich Textデータを取得（本記事では具体的なAPIリクエストは省略します）\n- 必要なライブラリを追加\n- Rich TextデータをHTMLに変換\n- Rich Textデータから目次を生成\n- コンポーネント側から呼び出す\n\n## 必要なライブラリの追加\n\n最初に、実装で必要となるContentful関連のライブラリをインストールします。\n\n```\nnpm install @contentful/rich-text-types @contentful/rich-text-react-renderer\n```\n\n▼ContentfulのRich Textデータ用型ファイル\n\nhttps://www.npmjs.com/package/@contentful/rich-text-types\n\n▼ContentfulのRich TextデータをReactコンポーネントに変換するライブラリ\n\nhttps://www.npmjs.com/package/@contentful/rich-text-react-renderer\n\n## Rich TextをHTMLに変換\n\nContentfulから取得したRich Textデータは、以下のようにnodeデータが配列で提供されます。\n\n![img_richtext_data.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/c09d335d-adaa-5760-acc7-b2ab0bdedfe2.png)\n\nこのRich Textデータを`@contentful/rich-text-react-renderer`ライブラリの`documentToReactComponents`関数を使用してHTMLに変換します。\n\nまた、目次の項目をクリックした際にページ内リンクでジャンプできるように、h2タグに対して`#heading-1` `#heading-2`という形式のID属性を付与します。\n\n```tsx:articleBody.tsx\nimport { BLOCKS, Document } from '@contentful/rich-text-types'\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer'\n\ntype Props = {\n  document: Document\n}\n\nexport default function ArticleBody({ document }: Props): React.ReactElement {\n  let headingIndex = 0\n\n  const options = {\n    renderNode: {\n      [BLOCKS.HEADING_2]: (node) => <h2 id={`heading-${++headingIndex}`}>{node.content[0].value}</h2>\n      [BLOCKS.HEADING_3]: (node) => <h3>{node.content[0].value}</h3>\n      [BLOCKS.HEADING_4]: (node) => <h4>{node.content[0].value}</h4>\n      [BLOCKS.HEADING_5]: (node) => <h5>{node.content[0].value}</h5>\n    }\n  }\n\n  return <div class=\"post-content\">{documentToReactComponents(document, options)}</div>\n}\n```\n\n## Rich Textから目次を生成\n\nPropsの`document`にRich Textが渡されるので、このデータを整形してulタグとして出力します。\n\n- Rich Textからh2タグ（`heading-2`）をfilterで取得\n- mapを使用してデータを整形\n- アンカーリンクはページ内リンクになるように、ID属性へのリンクを付与\n\n```tsx:tableOfContents.tsx\nimport { Text, Document } from '@contentful/rich-text-types'\n\ntype Props = {\n  document: Document\n}\n\nexport default function TableOfContents({ document }: Props): React.ReactElement {\n  const headings = document.content\n    .filter((content) => content.nodeType === 'heading-2')\n    .map((content, index) => ({\n        id: `heading-${++index}`,\n        text: (content.content[0] as Text).value,\n    }))\n\n  return (\n    <ul>\n      {headings.map((heading) => (\n        <li key={heading.id}>\n          <a href={`#${heading.id}`}>{heading.text}</a>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n## 記事側で各コンポーネントを呼び出す\n\n必要な箇所で目次と記事本文を呼び出します。\n\n以下の例では、目次の後に記事本文が配置されるようにしています。\n\n```tsx:Article.tsx\nimport { Document } from '@contentful/rich-text-types'\nimport TableOfContents from '@/components/TableOfContents'\nimport ArticleBody from '@/components/ArticleBody'\n\ntype Props = {\n  post: {\n    fields: {\n      rich_text: Document\n    }\n  }\n}\n\nexport default function Article({ post }: Props): React.ReactElement {\n  return (\n    <article>\n      <TableOfContents document={post.fields.rich_text} />\n      <ArticleBody document={post.fields.rich_text} />\n    </article>\n  )\n}\n```\n\n## おまけ: ページ内リンクジャンプ後に見出しがheaderに隠れる場合\n\nページ内リンクでジャンプした後、見出しがheaderと重なる問題が発生する場合があります。\n\nこれを解決するために、遷移先の見出しに対して`scroll-margin-top`プロパティを指定します。\n\n指定した値だけ、ズレた状態で見出しにジャンプすることができます。\n\n```css\nh2 {\n  scroll-margin-top: 150px;\n}\n```\n\n![img_scroll_margin.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/681000/818d16d7-bcaa-6e5c-e6de-da311f0b4ff3.png)\n\nContentfulからRich Textデータを取得し、目次を生成するまでの順序を説明しました。\n\n実装する際の参考にしてください。\n\n## PR\n\nHRBrainではフロントエンドエンジニア（コミュニケーションデザイン）の採用も行なっています。\n\nhttps://hrmos.co/pages/hrbrain/jobs/2110310\n\nhttps://www.hrbrain.co.jp/recruit\n"
  }
]